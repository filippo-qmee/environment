#!/usr/bin/env bash

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

echo "upgrade base gem system to latest version"
  sudo gem update --system
  sudo gem clean

echo "install xcode"
  sudo xcodebuild -license
  xcode-select --install
  read -p "Press any key to continue... " -n1 -s

echo "installing homebrew"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  # Make sure we’re using the latest Homebrew
  brew update --verbose
  brew doctor
  # Upgrade any already-installed formulae
  brew upgrade
  brew install wget
  wget https://raw.githubusercontent.com/qmee/environment/master/Brewfile -O ~/Brewfile
  brew tap Homebrew/bundle
  brew bundle --verbose
  # Remove outdated versions from the cellar
  brew cleanup
  brew cask cleanup

echo "add homebrew zsh to shells"
  sudo sh -c 'echo "/usr/local/bin/zsh" >> /etc/shells'

echo "post brew bundle"
  brew link curl --force

echo "docker containers"
  open -a Docker
  read -p "Press any key to continue... " -n1 -s
  docker run -d --name="postgres" --restart=unless-stopped -e POSTGRES_USER=$USER -p 5432:5432 postgres
  docker run -d --name="redis" --restart=unless-stopped -p 6379:6379 redis
  docker run -d --name="rabbitmq" --restart=unless-stopped -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management
  docker run -d --name="memcached" --restart=unless-stopped -p 11211:11211 memcached

echo "update pip"
  pip install --upgrade pip setuptools

echo "checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa -b 4096

echo "copying public key to clipboard. Paste it into your Github account ..."
  [[ -f ~/.ssh/id_rsa.pub ]] && cat ~/.ssh/id_rsa.pub | pbcopy
  open https://github.com/account/ssh
  read -p "Press any key once you have pasted into your Github account..." -n1 -s

echo "fetch dotfiles"
  git clone git@github.com:qmee/dotfiles.git ~/.dotfiles

echo "install dotfiles"
  cd ~/.dotfiles
  rake install
  cd ~/

echo "install docker completions"
  cd ~/.zsh
  mkdir completions
  cd ~/
  wget https://raw.githubusercontent.com/docker/docker/master/contrib/completion/zsh/_docker -O ~/.zsh/completions/_docker
  wget https://raw.githubusercontent.com/docker/machine/master/contrib/completion/zsh/_docker-machine -O ~/.zsh/completions/_docker-machine
  wget https://raw.githubusercontent.com/docker/compose/master/contrib/completion/zsh/_docker-compose -O ~/.zsh/completions/_docker-compose


echo "install standalone Heroku CLI client. You'll need administrative rights on your machine ..."
  wget -qO- https://toolbelt.heroku.com/install.sh | sh

echo "install heroku plugins"
  /usr/local/heroku/bin/heroku plugins:install git://github.com/ddollar/heroku-config.git
  /usr/local/heroku/bin/heroku plugins:install git://github.com/heroku/heroku-pg-extras.git
  /usr/local/heroku/bin/heroku plugins:install git://github.com/ddollar/heroku-redis-cli.git
  /usr/local/heroku/bin/heroku plugins:install https://github.com/heroku/heroku-oauth
  /usr/local/heroku/bin/heroku plugins:install heroku-docker

echo "init Vundle and install"
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  vim +PluginInstall +qall

echo "build Command-T plugin"
  cd ~/.vim/bundle/command-t
  rake make
  cd ~/

echo "create development directory"
  cd ~/
  mkdir development

echo "install snippets"
  cd ~/development
  git clone git://github.com/scrooloose/snipmate-snippets.git
  sed -i -e 's/snipmate/snipmate.vim/g' snipmate-snippets/Rakefile
  cd ~/development/snipmate-snippets
  rake deploy_local
  cd ~/

# http://stackoverflow.com/questions/13762280/zsh-compinit-insecure-directories
echo "fix permissions for zsh completions"
  compaudit | xargs chmod g-w

echo "get better colour scheme for terminal"
  cd ~/development
  git clone git://github.com/altercation/solarized.git
  cd ~/

echo "Install the Solarized Dark theme for iTerm2"
  cd ~
  open "development/solarized/iterm2-colors-solarized/Solarized Dark.itermcolors"
  read -p "Press any key to continue... " -n1 -s

echo "Don’t display the annoying prompt when quitting iTerm"
  defaults write com.googlecode.iterm2 PromptOnQuit -bool false

echo "Check for iTerm updates automatically"
  defaults write com.googlecode.iterm2 SUEnableAutomaticChecks -bool true

echo "setup iTerm2 DynamicProfile and make default"
  wget https://raw.githubusercontent.com/qmee/environment/master/iTerm2/DynamicProfiles/inconsolarized.json -O ~/Library/Application\ Support/iTerm2/DynamicProfiles/inconsolarized.json
  defaults write com.googlecode.iterm2 "Default Bookmark Guid" "d326c889-7564-409b-8b26-d3671001617e"

echo "latest ruby"
  cd ~/development
  ruby_version="$(curl -s https://raw.githubusercontent.com/postmodern/ruby-versions/master/ruby/stable.txt | tail -1)"
  ruby-install "ruby $ruby_version"
  rm -rf ~/src
  echo "$ruby_version" > .ruby-version
  source $(brew --prefix chruby)/share/chruby/chruby.sh
  source $(brew --prefix chruby)/share/chruby/auto.sh
  cd ~/development
  gem update --system
  gem clean
  gem install bundler --no-document
  cd ~/

echo "opening apps for configuration"
  open -a Flux
  read -p "Press any key to continue... " -n1 -s

echo "set osx preferences"
# from ~/.osx — http://mths.be/osx

###############################################################################
# General UI/UX                                                               #
###############################################################################

echo "Set standby delay to 2 hours (default is 1 hour)"
sudo pmset -a standbydelay 7200

echo "Disable the sound effects on boot"
sudo nvram SystemAudioVolume=" "

echo "Expand save panel by default"
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

echo "Expand print panel by default"
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

echo "Save to disk (not to iCloud) by default"
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

echo "Automatically quit printer app once the print jobs complete"
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

echo "Disable Resume system-wide"
defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool false

echo "Never go into computer sleep mode"
systemsetup -setcomputersleep Off > /dev/null

echo "Disable Photos.app from starting everytime a device is plugged in"
defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

echo "Show battery % in menu bar"
defaults write com.apple.menuextra.battery ShowPercent -bool true

echo "Show date in menu bar"
defaults write com.apple.menuextra.clock "DateFormat" "EEE d MMM  HH:mm"

echo "show bluetooth and keychain status in menu bar"
defaults write com.apple.systemuiserver menuExtras -array "/Applications/Utilities/Keychain Access.app/Contents/Resources/Keychain.menu" "/System/Library/CoreServices/Menu Extras/Displays.menu" "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" "/System/Library/CoreServices/Menu Extras/AirPort.menu" "/System/Library/CoreServices/Menu Extras/Battery.menu" "/System/Library/CoreServices/Menu Extras/Clock.menu"

###############################################################################
# Mouse and trackpad                                                          #
###############################################################################

echo "Turn on bluetooth mouse secondary click"
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode TwoButton

echo "Turn on trackpad App Expose"
defaults write com.apple.dock showAppExposeGestureEnabled -bool true

###############################################################################
# Mac App Store                                                               #
###############################################################################

echo "Enable the automatic update check"
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

echo "Check for software updates daily, not just once per week"
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

echo "Download newly available updates in background"
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

echo "Install System data files & security updates"
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

echo "Turn on app auto-update"
defaults write com.apple.commerce AutoUpdate -bool true

###############################################################################
# SSD-specific tweaks                                                         #
###############################################################################

echo "Disable local Time Machine snapshots"
sudo tmutil disablelocal

echo "Disable hibernation (speeds up entering sleep mode)"
sudo pmset -a hibernatemode 0

echo "Remove the sleep image file to save disk space"
sudo rm /Private/var/vm/sleepimage
# Create a zero-byte file instead…
sudo touch /Private/var/vm/sleepimage
# …and make sure it can’t be rewritten
sudo chflags uchg /Private/var/vm/sleepimage

echo "Disable the sudden motion sensor as it’s not useful for SSDs"
sudo pmset -a sms 0

###############################################################################
# Screen                                                                      #
###############################################################################

echo "Require password immediately after sleep or screen saver begins"
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

###############################################################################
# Finder                                                                      #
###############################################################################

echo "Finder: show status bar"
defaults write com.apple.finder ShowStatusBar -bool true

echo "When performing a search, search the current folder by default"
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

echo "Disable the warning when changing a file extension"
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

echo "Avoid creating .DS_Store files on network volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

echo "Set Downloads as the default location for new Finder windows"
defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Downloads/"

###############################################################################
# TextEdit
###############################################################################

echo "plain text default for TextEdit"
defaults write com.apple.TextEdit RichText -int 0

###############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################

echo "Set the icon size of Dock items to 46 pixels"
defaults write com.apple.dock tilesize -int 46

###############################################################################
# Time Machine                                                                #
###############################################################################

echo "Prevent Time Machine from prompting to use new hard drives as backup volume"
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

echo "Disable local Time Machine backups"
hash tmutil &> /dev/null && sudo tmutil disablelocal

echo "Done. Note that some of these changes require a logout/restart to take effect."
